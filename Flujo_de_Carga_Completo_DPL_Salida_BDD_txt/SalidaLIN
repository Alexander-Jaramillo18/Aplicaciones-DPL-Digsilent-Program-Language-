    
    object O;
    string case;
    set xSet;      
    object xObject;
    
    string str_loc_name;
    string str_cpGrid;
    string str_loc_name2;
    double	dou_Unom;
    double	dou_dline;
    int	    int_outserv;
    double	dou_fline;
    double	dou_curnom;
    double	dou_loading;
    double	dou_Pbus1;
    double	dou_Pbus2;
    double	dou_Qbus1;
    double	dou_Qbus2;
    double	dou_Sbus1;
    double	dou_Sbus2;
    
    string tipo;
    int out;
       
    ! Extraer nombre de caso
    O=ActiveCase();
    case=O:loc_name;
    
    ! Ordenar 
    xSet=AllRelevant('*.ElmLne'); 
    xSet.SortToVar(0, 'loc_name');
    
    ! Escribir en archivo .csv
    for(xObject = xSet.First();xObject;xObject = xSet.Next())
    {
       out = xObject:outserv;  
       dou_Unom       = xObject:e:Unom;
    
       if ({out=0}.and.{dou_Unom>50})   ! out==>0=ES/1=FS. 
       {
       tipo = 'LIN';
       str_loc_name   = xObject:e:loc_name;
       printf('%s\n',str_loc_name); !para registrar el error
       str_cpGrid     = xObject:r:cpGrid:b:loc_name;
       str_loc_name2  = xObject:b:loc_name;
    
       dou_dline      = xObject:e:dline;
       int_outserv    = xObject:e:outserv;
       dou_fline      = xObject:e:fline; 
       dou_curnom     = xObject:c:curnom;
       dou_loading    = xObject:c:loading;
       dou_Pbus1      = xObject:m:P:bus1;
       dou_Pbus2      = xObject:m:P:bus2;
       dou_Qbus1      = xObject:m:Q:bus1;
       dou_Qbus2      = xObject:m:Q:bus2;
       dou_Sbus1      = xObject:m:S:bus1;
       dou_Sbus2      = xObject:m:S:bus2;
    
       fprintf(2,'%s-%s-%s,%s,%s,%s,%s,%s,%f,%f,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f\n',str_loc_name,str_loc_name2,case,str_loc_name,tipo,case,str_cpGrid,str_loc_name2,dou_Unom,dou_dline,int_outserv,dou_fline,dou_curnom,dou_loading,dou_Pbus1,dou_Pbus2,dou_Qbus1,dou_Qbus2,dou_Sbus1,dou_Sbus2);
       }
    }
    
